generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  CLOSED
  CONFIRMED
  PENDING
  COMPLETED
}

enum SlotStatus {
  OPEN
  BOOKED
}

enum UserType {
  ADMIN
  DOCTOR
  PATIENT
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  phoneNumber    String   @unique
  password       String
  profilePicture Bytes?
  refreshToken   String?
  userType       UserType
  createdAt      DateTime
  updatedAt      DateTime @updatedAt
  isRegistered   Boolean  @default(false)
  patient        Patient?
  Doctor         Doctor?
}

model Patient {
  id                     String          @id @default(uuid())
  emailId                String
  dateOfBirth            DateTime
  address                String
  occupation             String
  gender                 String
  emergencyContactName   String
  emergencyContactNumber String
  allergies              String
  currentMedications     String?
  familyMedicalHistory   String?
  pastMedicalHistory     String?
  insuranceProvider      String?
  insurancePolicyNumber  String?
  idDocType              String
  idNumber               String
  idDoc                  Bytes?
  treatmentConsent       Boolean
  disclosureConsent      Boolean
  privacyPolicy          Boolean
  createdAt              DateTime
  updatedAt              DateTime        @updatedAt
  user                   User            @relation(fields: [userId], references: [id])
  userId                 String          @unique
  appointments           Appointment[]
  feedbacks              Feedback[]
  medicalHistory         MedicalHistory?
  doctor                 Doctor?         @relation(fields: [primaryPhysician], references: [id])
  primaryPhysician       String?
}

model Doctor {
  id             String          @id @default(uuid())
  emailId        String?
  specialization String
  department     String
  experience     Int
  createdAt      DateTime
  updatedAt      DateTime        @updatedAt
  serviceDoctors ServiceDoctor[]
  Patient        Patient[]
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @unique
}

model Appointment {
  id              String            @id @default(uuid())
  reason          String
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime
  updatedAt       DateTime          @updatedAt
  patient         Patient           @relation(fields: [patientId], references: [id])
  patientId       String
  serviceDoctor   ServiceDoctor     @relation(fields: [serviceDoctorId], references: [id])
  serviceDoctorId String
  slot            Slot              @relation(fields: [slotId], references: [id])
  slotId          String
}

model Service {
  id               String           @id @default(uuid())
  serviceName      String           @unique
  description      String
  picture          Bytes?
  features         String[]
  createdAt        DateTime
  updatedAt        DateTime         @updatedAt
  feedback         Feedback[]
  serviceDoctors   ServiceDoctor[]
  medicalHistories MedicalHistory[]
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
}

model ServiceDoctor {
  id           String        @id @default(uuid())
  cost         Int
  createdAt    DateTime
  updatedAt    DateTime      @updatedAt
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  doctorId     String
  service      Service       @relation(fields: [serviceId], references: [id])
  serviceId    String
  appointments Appointment[]
  slots        Slot[]

  @@unique([doctorId, serviceId])
  @@index([doctorId, serviceId])
}

model Slot {
  id          String         @id @default(uuid())
  startTime   DateTime
  totalSlots  Int            @default(0)
  bookedSlots Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      SlotStatus     @default(OPEN)
  serDoc      ServiceDoctor? @relation(fields: [serDocId], references: [id])
  serDocId    String?
  Appointment Appointment[]
}

model MedicalHistory {
  id         String   @id @default(uuid())
  visitDate  DateTime
  diagonosis String
  treatment  String
  notes      String
  createdAt  DateTime
  updatedAt  DateTime @updatedAt
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  String   @unique
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
}
