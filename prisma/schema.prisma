generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  CLOSED
  CONFIRMED
  PENDING
  COMPLETED
}

enum SlotStatus {
  OPEN
  BOOKED
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  phoneNumber    String   @unique
  password       String
  profilePicture Bytes?
  refreshToken   String?
  createdAt      DateTime
  updatedAt      DateTime @updatedAt
  isRegistered   Boolean  @default(false)
  patient        Patient?
}

model Patient {
  id                     String          @id @default(uuid())
  emailId                String
  dateOfBirth            DateTime
  address                String
  occupation             String
  gender                 String
  emergencyContactName   String
  emergencyContactNumber String
  allergies              String
  currentMedications     String?
  familyMedicalHistory   String?
  pastMedicalHistory     String?
  insuranceProvider      String?
  insurancePolicyNumber  String?
  idDocType              String
  idNumber               String
  idDoc                  Bytes?
  treatmentConsent       Boolean
  disclosureConsent      Boolean
  privacyPolicy          Boolean
  createdAt              DateTime
  updatedAt              DateTime        @updatedAt
  user                   User            @relation(fields: [userId], references: [id])
  userId                 String          @unique
  appointments           Appointment[]
  feedbacks              Feedback[]
  medicalHistory         MedicalHistory?
  doctor                 Doctor?         @relation(fields: [primaryPhysician], references: [id])
  primaryPhysician       String?
}

model Doctor {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  phoneNumber    String
  emailId        String?
  picture        Bytes?
  specialization String
  department     String // make enum for this
  experience     String
  createdAt      DateTime
  updatedAt      DateTime        @updatedAt
  serviceDoctors ServiceDoctor[]
  Patient        Patient[]
  Slot           Slot[]
}

model Appointment {
  id              String            @id @default(uuid())
  appointmentDate DateTime
  reason          String
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime
  updatedAt       DateTime          @updatedAt
  patient         Patient           @relation(fields: [patientId], references: [id])
  patientId       String
  serviceDoctor   ServiceDoctor     @relation(fields: [serviceDoctorId], references: [id])
  serviceDoctorId String
}

model Service {
  id               String           @id @default(uuid())
  serviceName      String
  description      String
  picture          Bytes?
  features         String[]
  createdAt        DateTime
  updatedAt        DateTime         @updatedAt
  feedback         Feedback[]
  serviceDoctors   ServiceDoctor[]
  medicalHistories MedicalHistory[]
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
}

model ServiceDoctor {
  id          String        @id @default(uuid())
  cost        Int
  createdAt   DateTime
  updatedAt   DateTime      @updatedAt
  doctor      Doctor        @relation(fields: [doctorId], references: [id])
  doctorId    String
  service     Service       @relation(fields: [serviceId], references: [id])
  serviceId   String
  Appointment Appointment[]
  slot        Slot[]

  @@unique([doctorId, serviceId])
  @@index([doctorId, serviceId])
}

model Slot {
  id              String        @id @default(uuid())
  startTime       DateTime
  status          SlotStatus    @default(OPEN)
  doctor          Doctor        @relation(fields: [doctorId], references: [id])
  doctorId        String
  serviceDoctor   ServiceDoctor @relation(fields: [serviceDoctorId], references: [id])
  serviceDoctorId String @default("be4518bd-ca11-4ce9-89bf-8ce5a0251446")

  @@unique([doctorId, startTime])
  @@index([doctorId, startTime])
}

model MedicalHistory {
  id         String   @id @default(uuid())
  visitDate  DateTime
  diagonosis String
  treatment  String
  notes      String
  createdAt  DateTime
  updatedAt  DateTime @updatedAt
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  String   @unique
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
}
